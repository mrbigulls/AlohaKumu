#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db48660631ac154a67865da117016c2257")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWordList(WordList instance);
    partial void UpdateWordList(WordList instance);
    partial void DeleteWordList(WordList instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWordSublist(WordSublist instance);
    partial void UpdateWordSublist(WordSublist instance);
    partial void DeleteWordSublist(WordSublist instance);
    partial void InsertConsequence(Consequence instance);
    partial void UpdateConsequence(Consequence instance);
    partial void DeleteConsequence(Consequence instance);
    partial void InsertWord(Word instance);
    partial void UpdateWord(Word instance);
    partial void DeleteWord(Word instance);
    partial void InsertTrialType(TrialType instance);
    partial void UpdateTrialType(TrialType instance);
    partial void DeleteTrialType(TrialType instance);
    partial void InsertTrial(Trial instance);
    partial void UpdateTrial(Trial instance);
    partial void DeleteTrial(Trial instance);
    partial void InsertTrialBlock(TrialBlock instance);
    partial void UpdateTrialBlock(TrialBlock instance);
    partial void DeleteTrialBlock(TrialBlock instance);
    partial void InsertStudiesUser(StudiesUser instance);
    partial void UpdateStudiesUser(StudiesUser instance);
    partial void DeleteStudiesUser(StudiesUser instance);
    partial void InsertStudy(Study instance);
    partial void UpdateStudy(Study instance);
    partial void DeleteStudy(Study instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertStudiesAdmin(StudiesAdmin instance);
    partial void UpdateStudiesAdmin(StudiesAdmin instance);
    partial void DeleteStudiesAdmin(StudiesAdmin instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["db48660631ac154a67865da117016c2257ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WordList> WordLists
		{
			get
			{
				return this.GetTable<WordList>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<WordSublist> WordSublists
		{
			get
			{
				return this.GetTable<WordSublist>();
			}
		}
		
		public System.Data.Linq.Table<Consequence> Consequences
		{
			get
			{
				return this.GetTable<Consequence>();
			}
		}
		
		public System.Data.Linq.Table<Word> Words
		{
			get
			{
				return this.GetTable<Word>();
			}
		}
		
		public System.Data.Linq.Table<TrialType> TrialTypes
		{
			get
			{
				return this.GetTable<TrialType>();
			}
		}
		
		public System.Data.Linq.Table<Trial> Trials
		{
			get
			{
				return this.GetTable<Trial>();
			}
		}
		
		public System.Data.Linq.Table<TrialBlock> TrialBlocks
		{
			get
			{
				return this.GetTable<TrialBlock>();
			}
		}
		
		public System.Data.Linq.Table<StudiesUser> StudiesUsers
		{
			get
			{
				return this.GetTable<StudiesUser>();
			}
		}
		
		public System.Data.Linq.Table<Study> Studies
		{
			get
			{
				return this.GetTable<Study>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<StudiesAdmin> StudiesAdmins
		{
			get
			{
				return this.GetTable<StudiesAdmin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WordList")]
	public partial class WordList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Word> _Words;
		
		private EntitySet<StudiesUser> _StudiesUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WordList()
		{
			this._Words = new EntitySet<Word>(new Action<Word>(this.attach_Words), new Action<Word>(this.detach_Words));
			this._StudiesUsers = new EntitySet<StudiesUser>(new Action<StudiesUser>(this.attach_StudiesUsers), new Action<StudiesUser>(this.detach_StudiesUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordList_Word", Storage="_Words", ThisKey="ID", OtherKey="WordListID")]
		public EntitySet<Word> Words
		{
			get
			{
				return this._Words;
			}
			set
			{
				this._Words.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordList_StudiesUser", Storage="_StudiesUsers", ThisKey="ID", OtherKey="WordListID")]
		public EntitySet<StudiesUser> StudiesUsers
		{
			get
			{
				return this._StudiesUsers;
			}
			set
			{
				this._StudiesUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.WordList = this;
		}
		
		private void detach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.WordList = null;
		}
		
		private void attach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.WordList = this;
		}
		
		private void detach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.WordList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private bool _Active;
		
		private int _ID;
		
		private EntitySet<TrialBlock> _TrialBlocks;
		
		private EntitySet<StudiesUser> _StudiesUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public User()
		{
			this._TrialBlocks = new EntitySet<TrialBlock>(new Action<TrialBlock>(this.attach_TrialBlocks), new Action<TrialBlock>(this.detach_TrialBlocks));
			this._StudiesUsers = new EntitySet<StudiesUser>(new Action<StudiesUser>(this.attach_StudiesUsers), new Action<StudiesUser>(this.detach_StudiesUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TrialBlock", Storage="_TrialBlocks", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<TrialBlock> TrialBlocks
		{
			get
			{
				return this._TrialBlocks;
			}
			set
			{
				this._TrialBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudiesUser", Storage="_StudiesUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<StudiesUser> StudiesUsers
		{
			get
			{
				return this._StudiesUsers;
			}
			set
			{
				this._StudiesUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WordSublist")]
	public partial class WordSublist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
		private EntitySet<Word> _Words;
		
		private EntitySet<StudiesUser> _StudiesUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public WordSublist()
		{
			this._Words = new EntitySet<Word>(new Action<Word>(this.attach_Words), new Action<Word>(this.detach_Words));
			this._StudiesUsers = new EntitySet<StudiesUser>(new Action<StudiesUser>(this.attach_StudiesUsers), new Action<StudiesUser>(this.detach_StudiesUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordSublist_Word", Storage="_Words", ThisKey="ID", OtherKey="WordSublistID")]
		public EntitySet<Word> Words
		{
			get
			{
				return this._Words;
			}
			set
			{
				this._Words.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordSublist_StudiesUser", Storage="_StudiesUsers", ThisKey="ID", OtherKey="WordSublistID")]
		public EntitySet<StudiesUser> StudiesUsers
		{
			get
			{
				return this._StudiesUsers;
			}
			set
			{
				this._StudiesUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.WordSublist = this;
		}
		
		private void detach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.WordSublist = null;
		}
		
		private void attach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.WordSublist = this;
		}
		
		private void detach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.WordSublist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Consequence")]
	public partial class Consequence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Filename;
		
		private EntitySet<Word> _Words;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    #endregion
		
		public Consequence()
		{
			this._Words = new EntitySet<Word>(new Action<Word>(this.attach_Words), new Action<Word>(this.detach_Words));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consequence_Word", Storage="_Words", ThisKey="ID", OtherKey="ConsequenceID")]
		public EntitySet<Word> Words
		{
			get
			{
				return this._Words;
			}
			set
			{
				this._Words.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.Consequence = this;
		}
		
		private void detach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.Consequence = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Word")]
	public partial class Word : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _English;
		
		private string _Hawaiian;
		
		private string _Picture;
		
		private int _ConsequenceID;
		
		private int _WordListID;
		
		private int _WordSublistID;
		
		private int _ID;
		
		private EntitySet<Trial> _Trials;
		
		private EntitySet<Trial> _Trials1;
		
		private EntitySet<Trial> _Trials2;
		
		private EntitySet<Trial> _Trials3;
		
		private EntitySet<Trial> _Trials4;
		
		private EntityRef<Consequence> _Consequence;
		
		private EntityRef<WordList> _WordList;
		
		private EntityRef<WordSublist> _WordSublist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnglishChanging(string value);
    partial void OnEnglishChanged();
    partial void OnHawaiianChanging(string value);
    partial void OnHawaiianChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnConsequenceIDChanging(int value);
    partial void OnConsequenceIDChanged();
    partial void OnWordListIDChanging(int value);
    partial void OnWordListIDChanged();
    partial void OnWordSublistIDChanging(int value);
    partial void OnWordSublistIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Word()
		{
			this._Trials = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials), new Action<Trial>(this.detach_Trials));
			this._Trials1 = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials1), new Action<Trial>(this.detach_Trials1));
			this._Trials2 = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials2), new Action<Trial>(this.detach_Trials2));
			this._Trials3 = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials3), new Action<Trial>(this.detach_Trials3));
			this._Trials4 = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials4), new Action<Trial>(this.detach_Trials4));
			this._Consequence = default(EntityRef<Consequence>);
			this._WordList = default(EntityRef<WordList>);
			this._WordSublist = default(EntityRef<WordSublist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_English", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string English
		{
			get
			{
				return this._English;
			}
			set
			{
				if ((this._English != value))
				{
					this.OnEnglishChanging(value);
					this.SendPropertyChanging();
					this._English = value;
					this.SendPropertyChanged("English");
					this.OnEnglishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hawaiian", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Hawaiian
		{
			get
			{
				return this._Hawaiian;
			}
			set
			{
				if ((this._Hawaiian != value))
				{
					this.OnHawaiianChanging(value);
					this.SendPropertyChanging();
					this._Hawaiian = value;
					this.SendPropertyChanged("Hawaiian");
					this.OnHawaiianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsequenceID", DbType="Int NOT NULL")]
		public int ConsequenceID
		{
			get
			{
				return this._ConsequenceID;
			}
			set
			{
				if ((this._ConsequenceID != value))
				{
					if (this._Consequence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsequenceIDChanging(value);
					this.SendPropertyChanging();
					this._ConsequenceID = value;
					this.SendPropertyChanged("ConsequenceID");
					this.OnConsequenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordListID", DbType="Int NOT NULL")]
		public int WordListID
		{
			get
			{
				return this._WordListID;
			}
			set
			{
				if ((this._WordListID != value))
				{
					if (this._WordList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWordListIDChanging(value);
					this.SendPropertyChanging();
					this._WordListID = value;
					this.SendPropertyChanged("WordListID");
					this.OnWordListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordSublistID", DbType="Int NOT NULL")]
		public int WordSublistID
		{
			get
			{
				return this._WordSublistID;
			}
			set
			{
				if ((this._WordSublistID != value))
				{
					if (this._WordSublist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWordSublistIDChanging(value);
					this.SendPropertyChanging();
					this._WordSublistID = value;
					this.SendPropertyChanged("WordSublistID");
					this.OnWordSublistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial", Storage="_Trials", ThisKey="ID", OtherKey="WordID")]
		public EntitySet<Trial> Trials
		{
			get
			{
				return this._Trials;
			}
			set
			{
				this._Trials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial1", Storage="_Trials1", ThisKey="ID", OtherKey="OptionIDClicked")]
		public EntitySet<Trial> Trials1
		{
			get
			{
				return this._Trials1;
			}
			set
			{
				this._Trials1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial2", Storage="_Trials2", ThisKey="ID", OtherKey="Option1ID")]
		public EntitySet<Trial> Trials2
		{
			get
			{
				return this._Trials2;
			}
			set
			{
				this._Trials2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial3", Storage="_Trials3", ThisKey="ID", OtherKey="Option2ID")]
		public EntitySet<Trial> Trials3
		{
			get
			{
				return this._Trials3;
			}
			set
			{
				this._Trials3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial4", Storage="_Trials4", ThisKey="ID", OtherKey="Option3ID")]
		public EntitySet<Trial> Trials4
		{
			get
			{
				return this._Trials4;
			}
			set
			{
				this._Trials4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Consequence_Word", Storage="_Consequence", ThisKey="ConsequenceID", OtherKey="ID", IsForeignKey=true)]
		public Consequence Consequence
		{
			get
			{
				return this._Consequence.Entity;
			}
			set
			{
				Consequence previousValue = this._Consequence.Entity;
				if (((previousValue != value) 
							|| (this._Consequence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Consequence.Entity = null;
						previousValue.Words.Remove(this);
					}
					this._Consequence.Entity = value;
					if ((value != null))
					{
						value.Words.Add(this);
						this._ConsequenceID = value.ID;
					}
					else
					{
						this._ConsequenceID = default(int);
					}
					this.SendPropertyChanged("Consequence");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordList_Word", Storage="_WordList", ThisKey="WordListID", OtherKey="ID", IsForeignKey=true)]
		public WordList WordList
		{
			get
			{
				return this._WordList.Entity;
			}
			set
			{
				WordList previousValue = this._WordList.Entity;
				if (((previousValue != value) 
							|| (this._WordList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WordList.Entity = null;
						previousValue.Words.Remove(this);
					}
					this._WordList.Entity = value;
					if ((value != null))
					{
						value.Words.Add(this);
						this._WordListID = value.ID;
					}
					else
					{
						this._WordListID = default(int);
					}
					this.SendPropertyChanged("WordList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordSublist_Word", Storage="_WordSublist", ThisKey="WordSublistID", OtherKey="ID", IsForeignKey=true)]
		public WordSublist WordSublist
		{
			get
			{
				return this._WordSublist.Entity;
			}
			set
			{
				WordSublist previousValue = this._WordSublist.Entity;
				if (((previousValue != value) 
							|| (this._WordSublist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WordSublist.Entity = null;
						previousValue.Words.Remove(this);
					}
					this._WordSublist.Entity = value;
					if ((value != null))
					{
						value.Words.Add(this);
						this._WordSublistID = value.ID;
					}
					else
					{
						this._WordSublistID = default(int);
					}
					this.SendPropertyChanged("WordSublist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trials(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word = this;
		}
		
		private void detach_Trials(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word = null;
		}
		
		private void attach_Trials1(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word1 = this;
		}
		
		private void detach_Trials1(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word1 = null;
		}
		
		private void attach_Trials2(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word2 = this;
		}
		
		private void detach_Trials2(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word2 = null;
		}
		
		private void attach_Trials3(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word3 = this;
		}
		
		private void detach_Trials3(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word3 = null;
		}
		
		private void attach_Trials4(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word4 = this;
		}
		
		private void detach_Trials4(Trial entity)
		{
			this.SendPropertyChanging();
			entity.Word4 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrialType")]
	public partial class TrialType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
		private EntitySet<TrialBlock> _TrialBlocks;
		
		private EntitySet<StudiesUser> _StudiesUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public TrialType()
		{
			this._TrialBlocks = new EntitySet<TrialBlock>(new Action<TrialBlock>(this.attach_TrialBlocks), new Action<TrialBlock>(this.detach_TrialBlocks));
			this._StudiesUsers = new EntitySet<StudiesUser>(new Action<StudiesUser>(this.attach_StudiesUsers), new Action<StudiesUser>(this.detach_StudiesUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrialType_TrialBlock", Storage="_TrialBlocks", ThisKey="ID", OtherKey="TrialTypeID")]
		public EntitySet<TrialBlock> TrialBlocks
		{
			get
			{
				return this._TrialBlocks;
			}
			set
			{
				this._TrialBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrialType_StudiesUser", Storage="_StudiesUsers", ThisKey="ID", OtherKey="TrialTypeID")]
		public EntitySet<StudiesUser> StudiesUsers
		{
			get
			{
				return this._StudiesUsers;
			}
			set
			{
				this._StudiesUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.TrialType = this;
		}
		
		private void detach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.TrialType = null;
		}
		
		private void attach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.TrialType = this;
		}
		
		private void detach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.TrialType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trial")]
	public partial class Trial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WordID;
		
		private int _TrialBlockID;
		
		private int _TimeFirstIDpresented;
		
		private int _TimeFirstIDclicked;
		
		private int _TimeSecondIDpresented;
		
		private int _TimeSecondIDclicked;
		
		private int _TimeOptionsPresented;
		
		private int _Option1ID;
		
		private int _Option2ID;
		
		private int _Option3ID;
		
		private int _OptionIDClicked;
		
		private int _TimeOptionClicked;
		
		private int _ID;
		
		private EntityRef<Word> _Word;
		
		private EntityRef<Word> _Word1;
		
		private EntityRef<Word> _Word2;
		
		private EntityRef<Word> _Word3;
		
		private EntityRef<Word> _Word4;
		
		private EntityRef<TrialBlock> _TrialBlock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWordIDChanging(int value);
    partial void OnWordIDChanged();
    partial void OnTrialBlockIDChanging(int value);
    partial void OnTrialBlockIDChanged();
    partial void OnTimeFirstIDpresentedChanging(int value);
    partial void OnTimeFirstIDpresentedChanged();
    partial void OnTimeFirstIDclickedChanging(int value);
    partial void OnTimeFirstIDclickedChanged();
    partial void OnTimeSecondIDpresentedChanging(int value);
    partial void OnTimeSecondIDpresentedChanged();
    partial void OnTimeSecondIDclickedChanging(int value);
    partial void OnTimeSecondIDclickedChanged();
    partial void OnTimeOptionsPresentedChanging(int value);
    partial void OnTimeOptionsPresentedChanged();
    partial void OnOption1IDChanging(int value);
    partial void OnOption1IDChanged();
    partial void OnOption2IDChanging(int value);
    partial void OnOption2IDChanged();
    partial void OnOption3IDChanging(int value);
    partial void OnOption3IDChanged();
    partial void OnOptionIDClickedChanging(int value);
    partial void OnOptionIDClickedChanged();
    partial void OnTimeOptionClickedChanging(int value);
    partial void OnTimeOptionClickedChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Trial()
		{
			this._Word = default(EntityRef<Word>);
			this._Word1 = default(EntityRef<Word>);
			this._Word2 = default(EntityRef<Word>);
			this._Word3 = default(EntityRef<Word>);
			this._Word4 = default(EntityRef<Word>);
			this._TrialBlock = default(EntityRef<TrialBlock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordID", DbType="Int NOT NULL")]
		public int WordID
		{
			get
			{
				return this._WordID;
			}
			set
			{
				if ((this._WordID != value))
				{
					if (this._Word.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWordIDChanging(value);
					this.SendPropertyChanging();
					this._WordID = value;
					this.SendPropertyChanged("WordID");
					this.OnWordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrialBlockID", DbType="Int NOT NULL")]
		public int TrialBlockID
		{
			get
			{
				return this._TrialBlockID;
			}
			set
			{
				if ((this._TrialBlockID != value))
				{
					if (this._TrialBlock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrialBlockIDChanging(value);
					this.SendPropertyChanging();
					this._TrialBlockID = value;
					this.SendPropertyChanged("TrialBlockID");
					this.OnTrialBlockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeFirstIDpresented", DbType="Int NOT NULL")]
		public int TimeFirstIDpresented
		{
			get
			{
				return this._TimeFirstIDpresented;
			}
			set
			{
				if ((this._TimeFirstIDpresented != value))
				{
					this.OnTimeFirstIDpresentedChanging(value);
					this.SendPropertyChanging();
					this._TimeFirstIDpresented = value;
					this.SendPropertyChanged("TimeFirstIDpresented");
					this.OnTimeFirstIDpresentedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeFirstIDclicked", DbType="Int NOT NULL")]
		public int TimeFirstIDclicked
		{
			get
			{
				return this._TimeFirstIDclicked;
			}
			set
			{
				if ((this._TimeFirstIDclicked != value))
				{
					this.OnTimeFirstIDclickedChanging(value);
					this.SendPropertyChanging();
					this._TimeFirstIDclicked = value;
					this.SendPropertyChanged("TimeFirstIDclicked");
					this.OnTimeFirstIDclickedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSecondIDpresented", DbType="Int NOT NULL")]
		public int TimeSecondIDpresented
		{
			get
			{
				return this._TimeSecondIDpresented;
			}
			set
			{
				if ((this._TimeSecondIDpresented != value))
				{
					this.OnTimeSecondIDpresentedChanging(value);
					this.SendPropertyChanging();
					this._TimeSecondIDpresented = value;
					this.SendPropertyChanged("TimeSecondIDpresented");
					this.OnTimeSecondIDpresentedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSecondIDclicked", DbType="Int NOT NULL")]
		public int TimeSecondIDclicked
		{
			get
			{
				return this._TimeSecondIDclicked;
			}
			set
			{
				if ((this._TimeSecondIDclicked != value))
				{
					this.OnTimeSecondIDclickedChanging(value);
					this.SendPropertyChanging();
					this._TimeSecondIDclicked = value;
					this.SendPropertyChanged("TimeSecondIDclicked");
					this.OnTimeSecondIDclickedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOptionsPresented", DbType="Int NOT NULL")]
		public int TimeOptionsPresented
		{
			get
			{
				return this._TimeOptionsPresented;
			}
			set
			{
				if ((this._TimeOptionsPresented != value))
				{
					this.OnTimeOptionsPresentedChanging(value);
					this.SendPropertyChanging();
					this._TimeOptionsPresented = value;
					this.SendPropertyChanged("TimeOptionsPresented");
					this.OnTimeOptionsPresentedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option1ID", DbType="Int NOT NULL")]
		public int Option1ID
		{
			get
			{
				return this._Option1ID;
			}
			set
			{
				if ((this._Option1ID != value))
				{
					if (this._Word2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOption1IDChanging(value);
					this.SendPropertyChanging();
					this._Option1ID = value;
					this.SendPropertyChanged("Option1ID");
					this.OnOption1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option2ID", DbType="Int NOT NULL")]
		public int Option2ID
		{
			get
			{
				return this._Option2ID;
			}
			set
			{
				if ((this._Option2ID != value))
				{
					if (this._Word3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOption2IDChanging(value);
					this.SendPropertyChanging();
					this._Option2ID = value;
					this.SendPropertyChanged("Option2ID");
					this.OnOption2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option3ID", DbType="Int NOT NULL")]
		public int Option3ID
		{
			get
			{
				return this._Option3ID;
			}
			set
			{
				if ((this._Option3ID != value))
				{
					if (this._Word4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOption3IDChanging(value);
					this.SendPropertyChanging();
					this._Option3ID = value;
					this.SendPropertyChanged("Option3ID");
					this.OnOption3IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionIDClicked", DbType="Int NOT NULL")]
		public int OptionIDClicked
		{
			get
			{
				return this._OptionIDClicked;
			}
			set
			{
				if ((this._OptionIDClicked != value))
				{
					if (this._Word1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptionIDClickedChanging(value);
					this.SendPropertyChanging();
					this._OptionIDClicked = value;
					this.SendPropertyChanged("OptionIDClicked");
					this.OnOptionIDClickedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOptionClicked", DbType="Int NOT NULL")]
		public int TimeOptionClicked
		{
			get
			{
				return this._TimeOptionClicked;
			}
			set
			{
				if ((this._TimeOptionClicked != value))
				{
					this.OnTimeOptionClickedChanging(value);
					this.SendPropertyChanging();
					this._TimeOptionClicked = value;
					this.SendPropertyChanged("TimeOptionClicked");
					this.OnTimeOptionClickedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial", Storage="_Word", ThisKey="WordID", OtherKey="ID", IsForeignKey=true)]
		public Word Word
		{
			get
			{
				return this._Word.Entity;
			}
			set
			{
				Word previousValue = this._Word.Entity;
				if (((previousValue != value) 
							|| (this._Word.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word.Entity = null;
						previousValue.Trials.Remove(this);
					}
					this._Word.Entity = value;
					if ((value != null))
					{
						value.Trials.Add(this);
						this._WordID = value.ID;
					}
					else
					{
						this._WordID = default(int);
					}
					this.SendPropertyChanged("Word");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial1", Storage="_Word1", ThisKey="OptionIDClicked", OtherKey="ID", IsForeignKey=true)]
		public Word Word1
		{
			get
			{
				return this._Word1.Entity;
			}
			set
			{
				Word previousValue = this._Word1.Entity;
				if (((previousValue != value) 
							|| (this._Word1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word1.Entity = null;
						previousValue.Trials1.Remove(this);
					}
					this._Word1.Entity = value;
					if ((value != null))
					{
						value.Trials1.Add(this);
						this._OptionIDClicked = value.ID;
					}
					else
					{
						this._OptionIDClicked = default(int);
					}
					this.SendPropertyChanged("Word1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial2", Storage="_Word2", ThisKey="Option1ID", OtherKey="ID", IsForeignKey=true)]
		public Word Word2
		{
			get
			{
				return this._Word2.Entity;
			}
			set
			{
				Word previousValue = this._Word2.Entity;
				if (((previousValue != value) 
							|| (this._Word2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word2.Entity = null;
						previousValue.Trials2.Remove(this);
					}
					this._Word2.Entity = value;
					if ((value != null))
					{
						value.Trials2.Add(this);
						this._Option1ID = value.ID;
					}
					else
					{
						this._Option1ID = default(int);
					}
					this.SendPropertyChanged("Word2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial3", Storage="_Word3", ThisKey="Option2ID", OtherKey="ID", IsForeignKey=true)]
		public Word Word3
		{
			get
			{
				return this._Word3.Entity;
			}
			set
			{
				Word previousValue = this._Word3.Entity;
				if (((previousValue != value) 
							|| (this._Word3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word3.Entity = null;
						previousValue.Trials3.Remove(this);
					}
					this._Word3.Entity = value;
					if ((value != null))
					{
						value.Trials3.Add(this);
						this._Option2ID = value.ID;
					}
					else
					{
						this._Option2ID = default(int);
					}
					this.SendPropertyChanged("Word3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Trial4", Storage="_Word4", ThisKey="Option3ID", OtherKey="ID", IsForeignKey=true)]
		public Word Word4
		{
			get
			{
				return this._Word4.Entity;
			}
			set
			{
				Word previousValue = this._Word4.Entity;
				if (((previousValue != value) 
							|| (this._Word4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word4.Entity = null;
						previousValue.Trials4.Remove(this);
					}
					this._Word4.Entity = value;
					if ((value != null))
					{
						value.Trials4.Add(this);
						this._Option3ID = value.ID;
					}
					else
					{
						this._Option3ID = default(int);
					}
					this.SendPropertyChanged("Word4");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrialBlock_Trial", Storage="_TrialBlock", ThisKey="TrialBlockID", OtherKey="ID", IsForeignKey=true)]
		public TrialBlock TrialBlock
		{
			get
			{
				return this._TrialBlock.Entity;
			}
			set
			{
				TrialBlock previousValue = this._TrialBlock.Entity;
				if (((previousValue != value) 
							|| (this._TrialBlock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrialBlock.Entity = null;
						previousValue.Trials.Remove(this);
					}
					this._TrialBlock.Entity = value;
					if ((value != null))
					{
						value.Trials.Add(this);
						this._TrialBlockID = value.ID;
					}
					else
					{
						this._TrialBlockID = default(int);
					}
					this.SendPropertyChanged("TrialBlock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrialBlock")]
	public partial class TrialBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _StudyID;
		
		private System.DateTime _StartTime;
		
		private int _TrialTypeID;
		
		private EntitySet<Trial> _Trials;
		
		private EntityRef<TrialType> _TrialType;
		
		private EntityRef<User> _User;
		
		private EntityRef<StudiesUser> _StudiesUser;
		
		private EntityRef<Study> _Study;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnStudyIDChanging(int value);
    partial void OnStudyIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnTrialTypeIDChanging(int value);
    partial void OnTrialTypeIDChanged();
    #endregion
		
		public TrialBlock()
		{
			this._Trials = new EntitySet<Trial>(new Action<Trial>(this.attach_Trials), new Action<Trial>(this.detach_Trials));
			this._TrialType = default(EntityRef<TrialType>);
			this._User = default(EntityRef<User>);
			this._StudiesUser = default(EntityRef<StudiesUser>);
			this._Study = default(EntityRef<Study>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._StudiesUser.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyID", DbType="Int NOT NULL")]
		public int StudyID
		{
			get
			{
				return this._StudyID;
			}
			set
			{
				if ((this._StudyID != value))
				{
					if ((this._StudiesUser.HasLoadedOrAssignedValue || this._Study.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyIDChanging(value);
					this.SendPropertyChanging();
					this._StudyID = value;
					this.SendPropertyChanged("StudyID");
					this.OnStudyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrialTypeID", DbType="Int NOT NULL")]
		public int TrialTypeID
		{
			get
			{
				return this._TrialTypeID;
			}
			set
			{
				if ((this._TrialTypeID != value))
				{
					if (this._TrialType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TrialTypeID = value;
					this.SendPropertyChanged("TrialTypeID");
					this.OnTrialTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrialBlock_Trial", Storage="_Trials", ThisKey="ID", OtherKey="TrialBlockID")]
		public EntitySet<Trial> Trials
		{
			get
			{
				return this._Trials;
			}
			set
			{
				this._Trials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrialType_TrialBlock", Storage="_TrialType", ThisKey="TrialTypeID", OtherKey="ID", IsForeignKey=true)]
		public TrialType TrialType
		{
			get
			{
				return this._TrialType.Entity;
			}
			set
			{
				TrialType previousValue = this._TrialType.Entity;
				if (((previousValue != value) 
							|| (this._TrialType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrialType.Entity = null;
						previousValue.TrialBlocks.Remove(this);
					}
					this._TrialType.Entity = value;
					if ((value != null))
					{
						value.TrialBlocks.Add(this);
						this._TrialTypeID = value.ID;
					}
					else
					{
						this._TrialTypeID = default(int);
					}
					this.SendPropertyChanged("TrialType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TrialBlock", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TrialBlocks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TrialBlocks.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudiesUser_TrialBlock", Storage="_StudiesUser", ThisKey="StudyID,UserID", OtherKey="StudyID,UserID", IsForeignKey=true)]
		public StudiesUser StudiesUser
		{
			get
			{
				return this._StudiesUser.Entity;
			}
			set
			{
				StudiesUser previousValue = this._StudiesUser.Entity;
				if (((previousValue != value) 
							|| (this._StudiesUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudiesUser.Entity = null;
						previousValue.TrialBlocks.Remove(this);
					}
					this._StudiesUser.Entity = value;
					if ((value != null))
					{
						value.TrialBlocks.Add(this);
						this._StudyID = value.StudyID;
						this._UserID = value.UserID;
					}
					else
					{
						this._StudyID = default(int);
						this._UserID = default(int);
					}
					this.SendPropertyChanged("StudiesUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_TrialBlock", Storage="_Study", ThisKey="StudyID", OtherKey="ID", IsForeignKey=true)]
		public Study Study
		{
			get
			{
				return this._Study.Entity;
			}
			set
			{
				Study previousValue = this._Study.Entity;
				if (((previousValue != value) 
							|| (this._Study.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Study.Entity = null;
						previousValue.TrialBlocks.Remove(this);
					}
					this._Study.Entity = value;
					if ((value != null))
					{
						value.TrialBlocks.Add(this);
						this._StudyID = value.ID;
					}
					else
					{
						this._StudyID = default(int);
					}
					this.SendPropertyChanged("Study");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trials(Trial entity)
		{
			this.SendPropertyChanging();
			entity.TrialBlock = this;
		}
		
		private void detach_Trials(Trial entity)
		{
			this.SendPropertyChanging();
			entity.TrialBlock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudiesUsers")]
	public partial class StudiesUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudyID;
		
		private int _UserID;
		
		private int _WordListID;
		
		private int _WordSublistID;
		
		private bool _Mix;
		
		private int _TrialTypeID;
		
		private bool _ControlGroup;
		
		private EntitySet<TrialBlock> _TrialBlocks;
		
		private EntityRef<TrialType> _TrialType;
		
		private EntityRef<User> _User;
		
		private EntityRef<WordList> _WordList;
		
		private EntityRef<WordSublist> _WordSublist;
		
		private EntityRef<Study> _Study;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyIDChanging(int value);
    partial void OnStudyIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnWordListIDChanging(int value);
    partial void OnWordListIDChanged();
    partial void OnWordSublistIDChanging(int value);
    partial void OnWordSublistIDChanged();
    partial void OnMixChanging(bool value);
    partial void OnMixChanged();
    partial void OnTrialTypeIDChanging(int value);
    partial void OnTrialTypeIDChanged();
    partial void OnControlGroupChanging(bool value);
    partial void OnControlGroupChanged();
    #endregion
		
		public StudiesUser()
		{
			this._TrialBlocks = new EntitySet<TrialBlock>(new Action<TrialBlock>(this.attach_TrialBlocks), new Action<TrialBlock>(this.detach_TrialBlocks));
			this._TrialType = default(EntityRef<TrialType>);
			this._User = default(EntityRef<User>);
			this._WordList = default(EntityRef<WordList>);
			this._WordSublist = default(EntityRef<WordSublist>);
			this._Study = default(EntityRef<Study>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudyID
		{
			get
			{
				return this._StudyID;
			}
			set
			{
				if ((this._StudyID != value))
				{
					if (this._Study.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyIDChanging(value);
					this.SendPropertyChanging();
					this._StudyID = value;
					this.SendPropertyChanged("StudyID");
					this.OnStudyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordListID", DbType="Int NOT NULL")]
		public int WordListID
		{
			get
			{
				return this._WordListID;
			}
			set
			{
				if ((this._WordListID != value))
				{
					if (this._WordList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWordListIDChanging(value);
					this.SendPropertyChanging();
					this._WordListID = value;
					this.SendPropertyChanged("WordListID");
					this.OnWordListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordSublistID", DbType="Int NOT NULL")]
		public int WordSublistID
		{
			get
			{
				return this._WordSublistID;
			}
			set
			{
				if ((this._WordSublistID != value))
				{
					if (this._WordSublist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWordSublistIDChanging(value);
					this.SendPropertyChanging();
					this._WordSublistID = value;
					this.SendPropertyChanged("WordSublistID");
					this.OnWordSublistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mix", DbType="Bit NOT NULL")]
		public bool Mix
		{
			get
			{
				return this._Mix;
			}
			set
			{
				if ((this._Mix != value))
				{
					this.OnMixChanging(value);
					this.SendPropertyChanging();
					this._Mix = value;
					this.SendPropertyChanged("Mix");
					this.OnMixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrialTypeID", DbType="Int NOT NULL")]
		public int TrialTypeID
		{
			get
			{
				return this._TrialTypeID;
			}
			set
			{
				if ((this._TrialTypeID != value))
				{
					if (this._TrialType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TrialTypeID = value;
					this.SendPropertyChanged("TrialTypeID");
					this.OnTrialTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlGroup", DbType="Bit NOT NULL")]
		public bool ControlGroup
		{
			get
			{
				return this._ControlGroup;
			}
			set
			{
				if ((this._ControlGroup != value))
				{
					this.OnControlGroupChanging(value);
					this.SendPropertyChanging();
					this._ControlGroup = value;
					this.SendPropertyChanged("ControlGroup");
					this.OnControlGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudiesUser_TrialBlock", Storage="_TrialBlocks", ThisKey="StudyID,UserID", OtherKey="StudyID,UserID")]
		public EntitySet<TrialBlock> TrialBlocks
		{
			get
			{
				return this._TrialBlocks;
			}
			set
			{
				this._TrialBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrialType_StudiesUser", Storage="_TrialType", ThisKey="TrialTypeID", OtherKey="ID", IsForeignKey=true)]
		public TrialType TrialType
		{
			get
			{
				return this._TrialType.Entity;
			}
			set
			{
				TrialType previousValue = this._TrialType.Entity;
				if (((previousValue != value) 
							|| (this._TrialType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrialType.Entity = null;
						previousValue.StudiesUsers.Remove(this);
					}
					this._TrialType.Entity = value;
					if ((value != null))
					{
						value.StudiesUsers.Add(this);
						this._TrialTypeID = value.ID;
					}
					else
					{
						this._TrialTypeID = default(int);
					}
					this.SendPropertyChanged("TrialType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudiesUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudiesUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudiesUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordList_StudiesUser", Storage="_WordList", ThisKey="WordListID", OtherKey="ID", IsForeignKey=true)]
		public WordList WordList
		{
			get
			{
				return this._WordList.Entity;
			}
			set
			{
				WordList previousValue = this._WordList.Entity;
				if (((previousValue != value) 
							|| (this._WordList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WordList.Entity = null;
						previousValue.StudiesUsers.Remove(this);
					}
					this._WordList.Entity = value;
					if ((value != null))
					{
						value.StudiesUsers.Add(this);
						this._WordListID = value.ID;
					}
					else
					{
						this._WordListID = default(int);
					}
					this.SendPropertyChanged("WordList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordSublist_StudiesUser", Storage="_WordSublist", ThisKey="WordSublistID", OtherKey="ID", IsForeignKey=true)]
		public WordSublist WordSublist
		{
			get
			{
				return this._WordSublist.Entity;
			}
			set
			{
				WordSublist previousValue = this._WordSublist.Entity;
				if (((previousValue != value) 
							|| (this._WordSublist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WordSublist.Entity = null;
						previousValue.StudiesUsers.Remove(this);
					}
					this._WordSublist.Entity = value;
					if ((value != null))
					{
						value.StudiesUsers.Add(this);
						this._WordSublistID = value.ID;
					}
					else
					{
						this._WordSublistID = default(int);
					}
					this.SendPropertyChanged("WordSublist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_StudiesUser", Storage="_Study", ThisKey="StudyID", OtherKey="ID", IsForeignKey=true)]
		public Study Study
		{
			get
			{
				return this._Study.Entity;
			}
			set
			{
				Study previousValue = this._Study.Entity;
				if (((previousValue != value) 
							|| (this._Study.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Study.Entity = null;
						previousValue.StudiesUsers.Remove(this);
					}
					this._Study.Entity = value;
					if ((value != null))
					{
						value.StudiesUsers.Add(this);
						this._StudyID = value.ID;
					}
					else
					{
						this._StudyID = default(int);
					}
					this.SendPropertyChanged("Study");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.StudiesUser = this;
		}
		
		private void detach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.StudiesUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Study")]
	public partial class Study : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _TargetWordsPerMinute;
		
		private bool _Active;
		
		private int _WaitHours;
		
		private int _WaitMins;
		
		private int _WaitSecs;
		
		private string _SeeInstructions;
		
		private string _HearInstructions;
		
		private int _WordTrialsPerBlock;
		
		private EntitySet<TrialBlock> _TrialBlocks;
		
		private EntitySet<StudiesUser> _StudiesUsers;
		
		private EntitySet<StudiesAdmin> _StudiesAdmins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTargetWordsPerMinuteChanging(double value);
    partial void OnTargetWordsPerMinuteChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnWaitHoursChanging(int value);
    partial void OnWaitHoursChanged();
    partial void OnWaitMinsChanging(int value);
    partial void OnWaitMinsChanged();
    partial void OnWaitSecsChanging(int value);
    partial void OnWaitSecsChanged();
    partial void OnSeeInstructionsChanging(string value);
    partial void OnSeeInstructionsChanged();
    partial void OnHearInstructionsChanging(string value);
    partial void OnHearInstructionsChanged();
    partial void OnWordTrialsPerBlockChanging(int value);
    partial void OnWordTrialsPerBlockChanged();
    #endregion
		
		public Study()
		{
			this._TrialBlocks = new EntitySet<TrialBlock>(new Action<TrialBlock>(this.attach_TrialBlocks), new Action<TrialBlock>(this.detach_TrialBlocks));
			this._StudiesUsers = new EntitySet<StudiesUser>(new Action<StudiesUser>(this.attach_StudiesUsers), new Action<StudiesUser>(this.detach_StudiesUsers));
			this._StudiesAdmins = new EntitySet<StudiesAdmin>(new Action<StudiesAdmin>(this.attach_StudiesAdmins), new Action<StudiesAdmin>(this.detach_StudiesAdmins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetWordsPerMinute", DbType="Float NOT NULL")]
		public double TargetWordsPerMinute
		{
			get
			{
				return this._TargetWordsPerMinute;
			}
			set
			{
				if ((this._TargetWordsPerMinute != value))
				{
					this.OnTargetWordsPerMinuteChanging(value);
					this.SendPropertyChanging();
					this._TargetWordsPerMinute = value;
					this.SendPropertyChanged("TargetWordsPerMinute");
					this.OnTargetWordsPerMinuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaitHours", DbType="Int NOT NULL")]
		public int WaitHours
		{
			get
			{
				return this._WaitHours;
			}
			set
			{
				if ((this._WaitHours != value))
				{
					this.OnWaitHoursChanging(value);
					this.SendPropertyChanging();
					this._WaitHours = value;
					this.SendPropertyChanged("WaitHours");
					this.OnWaitHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaitMins", DbType="Int NOT NULL")]
		public int WaitMins
		{
			get
			{
				return this._WaitMins;
			}
			set
			{
				if ((this._WaitMins != value))
				{
					this.OnWaitMinsChanging(value);
					this.SendPropertyChanging();
					this._WaitMins = value;
					this.SendPropertyChanged("WaitMins");
					this.OnWaitMinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaitSecs", DbType="Int NOT NULL")]
		public int WaitSecs
		{
			get
			{
				return this._WaitSecs;
			}
			set
			{
				if ((this._WaitSecs != value))
				{
					this.OnWaitSecsChanging(value);
					this.SendPropertyChanging();
					this._WaitSecs = value;
					this.SendPropertyChanged("WaitSecs");
					this.OnWaitSecsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeeInstructions", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SeeInstructions
		{
			get
			{
				return this._SeeInstructions;
			}
			set
			{
				if ((this._SeeInstructions != value))
				{
					this.OnSeeInstructionsChanging(value);
					this.SendPropertyChanging();
					this._SeeInstructions = value;
					this.SendPropertyChanged("SeeInstructions");
					this.OnSeeInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearInstructions", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string HearInstructions
		{
			get
			{
				return this._HearInstructions;
			}
			set
			{
				if ((this._HearInstructions != value))
				{
					this.OnHearInstructionsChanging(value);
					this.SendPropertyChanging();
					this._HearInstructions = value;
					this.SendPropertyChanged("HearInstructions");
					this.OnHearInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordTrialsPerBlock", DbType="Int NOT NULL")]
		public int WordTrialsPerBlock
		{
			get
			{
				return this._WordTrialsPerBlock;
			}
			set
			{
				if ((this._WordTrialsPerBlock != value))
				{
					this.OnWordTrialsPerBlockChanging(value);
					this.SendPropertyChanging();
					this._WordTrialsPerBlock = value;
					this.SendPropertyChanged("WordTrialsPerBlock");
					this.OnWordTrialsPerBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_TrialBlock", Storage="_TrialBlocks", ThisKey="ID", OtherKey="StudyID")]
		public EntitySet<TrialBlock> TrialBlocks
		{
			get
			{
				return this._TrialBlocks;
			}
			set
			{
				this._TrialBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_StudiesUser", Storage="_StudiesUsers", ThisKey="ID", OtherKey="StudyID")]
		public EntitySet<StudiesUser> StudiesUsers
		{
			get
			{
				return this._StudiesUsers;
			}
			set
			{
				this._StudiesUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_StudiesAdmin", Storage="_StudiesAdmins", ThisKey="ID", OtherKey="StudyID")]
		public EntitySet<StudiesAdmin> StudiesAdmins
		{
			get
			{
				return this._StudiesAdmins;
			}
			set
			{
				this._StudiesAdmins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.Study = this;
		}
		
		private void detach_TrialBlocks(TrialBlock entity)
		{
			this.SendPropertyChanging();
			entity.Study = null;
		}
		
		private void attach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.Study = this;
		}
		
		private void detach_StudiesUsers(StudiesUser entity)
		{
			this.SendPropertyChanging();
			entity.Study = null;
		}
		
		private void attach_StudiesAdmins(StudiesAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Study = this;
		}
		
		private void detach_StudiesAdmins(StudiesAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Study = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<StudiesAdmin> _StudiesAdmins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Admin()
		{
			this._StudiesAdmins = new EntitySet<StudiesAdmin>(new Action<StudiesAdmin>(this.attach_StudiesAdmins), new Action<StudiesAdmin>(this.detach_StudiesAdmins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_StudiesAdmin", Storage="_StudiesAdmins", ThisKey="ID", OtherKey="AdminID")]
		public EntitySet<StudiesAdmin> StudiesAdmins
		{
			get
			{
				return this._StudiesAdmins;
			}
			set
			{
				this._StudiesAdmins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudiesAdmins(StudiesAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Admin = this;
		}
		
		private void detach_StudiesAdmins(StudiesAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Admin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudiesAdmins")]
	public partial class StudiesAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudyID;
		
		private int _AdminID;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<Study> _Study;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyIDChanging(int value);
    partial void OnStudyIDChanged();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    #endregion
		
		public StudiesAdmin()
		{
			this._Admin = default(EntityRef<Admin>);
			this._Study = default(EntityRef<Study>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudyID
		{
			get
			{
				return this._StudyID;
			}
			set
			{
				if ((this._StudyID != value))
				{
					if (this._Study.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyIDChanging(value);
					this.SendPropertyChanging();
					this._StudyID = value;
					this.SendPropertyChanged("StudyID");
					this.OnStudyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._Admin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_StudiesAdmin", Storage="_Admin", ThisKey="AdminID", OtherKey="ID", IsForeignKey=true)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.StudiesAdmins.Remove(this);
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.StudiesAdmins.Add(this);
						this._AdminID = value.ID;
					}
					else
					{
						this._AdminID = default(int);
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Study_StudiesAdmin", Storage="_Study", ThisKey="StudyID", OtherKey="ID", IsForeignKey=true)]
		public Study Study
		{
			get
			{
				return this._Study.Entity;
			}
			set
			{
				Study previousValue = this._Study.Entity;
				if (((previousValue != value) 
							|| (this._Study.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Study.Entity = null;
						previousValue.StudiesAdmins.Remove(this);
					}
					this._Study.Entity = value;
					if ((value != null))
					{
						value.StudiesAdmins.Add(this);
						this._StudyID = value.ID;
					}
					else
					{
						this._StudyID = default(int);
					}
					this.SendPropertyChanged("Study");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
